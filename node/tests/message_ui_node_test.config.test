<?php
/**
 * @file
 * Web tests for the message_ui_node module configuration functionality.
 */

/**
 * Tests about the node activity configuration.
 */
class MessageUiNodeTestConfig extends DrupalWebTestCase {
  /**
   * Node type name to use in the tests.
   *
   * @var string
   */
  const TYPE = 'message_ui_node_test';

  /**
   * Get the test info.
   *
   * @return array
   *   The test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'Message UI - Activity Node Configuration',
      'description' => 'Test the activity configuration for node types.',
      'group' => 'Message UI',
    );
  }

  /**
   * Setup the test environment.
   */
  public function setUp() {
    $modules = array('message', 'message_ui_node');
    parent::setUp($modules);

    // Create a new user with some permissions you need; then log in.
    $admin = $this->drupalCreateUser(array(
        'administer content types',
        'administer nodes',
      ));
    $this->drupalLogin($admin);

    // Create a new node type.
    $info = (object) array(
      'name' => self::TYPE,
      'type' => self::TYPE,
      'base' => 'node_content',
      'module' => 'node',
      'description' => t('Test content type for message_ui_node_test.'),
      'has_title' => 1,
      'title_label' => t('Title'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      'disabled' => 0,
      'orig_type' => self::TYPE,
    );
    node_type_save($info);
  }

  /**
   * Test the functionality to set the activity configuration for node types.
   */
  public function testConfig() {
    // Test the variable name creator.
    $name = message_ui_node_variable_name(self::TYPE);
    $this->assertEqual('message_ui_node_' . self::TYPE, $name);

    // Test the default variable value.
    $this->assertFalse(variable_get($name, FALSE));
    $this->assertFalse(message_ui_node_needs_message(self::TYPE, 'insert'));
    $this->assertFalse(message_ui_node_needs_message(self::TYPE, 'update'));
    $this->assertFalse(message_ui_node_needs_message(self::TYPE, 'delete'));

    // Edit the activity settings.
    $edit = array(
      'message_ui_node[insert]' => 'insert',
      'message_ui_node[update]' => 'update',
    );
    $this->drupalPost(
      'admin/structure/types/manage/' . self::TYPE,
      $edit,
      t('Save content type')
    );

    // Check if the settings are saved in the variable.
    $config = variable_get($name, array());
    $this->assertEqual(
      $config,
      array('insert' => 'insert', 'update' => 'update', 'delete' => 0)
    );
    $this->assertTrue(message_ui_node_needs_message(self::TYPE, 'insert'));
    $this->assertTrue(message_ui_node_needs_message(self::TYPE, 'update'));
    $this->assertFalse(message_ui_node_needs_message(self::TYPE, 'delete'));

    // Check messages when deleting nodes in combinations with the message
    // module settings.
    variable_set(
      $name,
      array('insert' => 'insert', 'update' => 'update', 'delete' => 'delete')
    );

    $this->assertFalse(message_ui_node_needs_message(self::TYPE, 'delete'));
    variable_set('message_delete_on_entity_delete', array());
    $this->assertTrue(message_ui_node_needs_message(self::TYPE, 'delete'));

    // Rename the node type.
    $new_type = self::TYPE . '_new';
    $new_name = $name . '_new';
    $edit = array(
      'type' => $new_type,
    );
    $this->drupalPost(
      'admin/structure/types/manage/' . self::TYPE,
      $edit,
      t('Save content type')
    );

    // Check if the old variable is deleted and a new one is created.
    $this->assertFalse(variable_get($name, FALSE));
    $this->assertEqual(
      variable_get($new_name, array()),
      array('insert' => 'insert', 'update' => 'update', 'delete' => 0)
    );

    // Delete the node type.
    node_type_delete($new_type);

    // Check if the variable is deleted.
    $this->assertFalse(variable_get($new_name, FALSE));
  }

}
